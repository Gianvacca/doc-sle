<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xml:id="docker.dockerizing.application" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.0"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Creating &docker; Images for Applications</title>
 <para>
  &deng; is a technology that can help you to minimize resources used to run or
  build your applications. There are several types of applications that are
  suitable to run inside a &docker; container like daemons, Web pages or
  applications that expose ports for communication. You can use &deng; to
  automate building and deployment processes by adding the build process
  into a &docker; image, then building the image and then running containers
  based on that image.
 </para>
 <para>
  Running your application inside a &docker; container provides you with the
  following advantages:
 </para>
 <itemizedlist>
  <listitem>
   <para>
    You can minimize the runtime environment of the application as you can add
    to the &docker; image of the application just the required processes and
    applications.
   </para>
  </listitem>
  <listitem>
   <para>
    The image with your application is portable across machines also with
    different Linux host systems.
   </para>
  </listitem>
  <listitem>
   <para>
    You can share the image of your application by using a repository.
   </para>
  </listitem>
  <listitem>
   <para>
    You can use different versions of required packages in the container than
    the host system uses without having problems with dependencies.
   </para>
  </listitem>
  <listitem>
   <para>
    You can run several instances of the same application that are completely
    independent from each other.
   </para>
  </listitem>
 </itemizedlist>
 <para>
  Using &deng; to build of applications has the following benefits:
 </para>
 <itemizedlist>
  <listitem>
   <para>
    You can prepare a complete building image.
   </para>
  </listitem>
  <listitem>
   <para>
    Your build always runs in the same environment.
   </para>
  </listitem>
  <listitem>
   <para>
    Your developers can test their code in the same environment as used in
    production.
   </para>
  </listitem>
  <listitem>
   <para>
    You can set up an automated building process.
   </para>
  </listitem>
 </itemizedlist>
 <para>
  The following section provides examples and tips on creating &docker; images
  for applications. Prior to reading further, make sure that you have
  activated your &slsa; base &docker; image as described in
  <xref linkend="Building_Pre-build_Images"/>.
 </para>
 <sect1 xml:id="Application_with_specific_dependencies">
  <title>Running an Application with Specific Package Versions</title>

  <para>
   You may face a problem that your application uses a specific version of a
   package that is different from the package installed on the system that
   should run your application. You can modify your application to work with
   another version or you may create a &docker; image with that particular
   package version. The following example of a <filename>Dockerfile</filename>
   shows an image based on a current version of &slsa; but with an older
   version of the <literal>example</literal> package
  </para>

<screen>FROM registry.suse.com/suse/sles12sp3
MAINTAINER Tux

RUN zypper ref &amp;&amp; zypper in -f example-1.0.0-0
COPY application.rpm /tmp/

RUN zypper --non-interactive in /tmp/application.rpm

ENTRYPOINT ["/etc/bin/application"]

CMD ["-i"]</screen>

  <para>
   Now you can build the image by running in the same directory as the
   <filename>Dockerfile</filename> resides:
  </para>

  <screen>&prompt.user;docker build --tag tux_application:latest .</screen>

  <para>
   The <filename>Dockerfile</filename> example shown above performs the
   following operations during the <command>docker build</command>:
  </para>

  <orderedlist>
   <listitem>
    <para>
     Updates the &slsa; repositories.
    </para>
   </listitem>
   <listitem>
    <para>
     Installs the desired version of the <literal>example</literal> package.
    </para>
   </listitem>
   <listitem>
    <para>
     Copies your application package to the image. The source RPM must be
     placed in the build context.
    </para>
   </listitem>
   <listitem>
    <para>
     Unpacks your application.
    </para>
   </listitem>
   <listitem>
    <para>
     The last two steps run your application after a container is started.
    </para>
   </listitem>
  </orderedlist>

  <para>
   After a successful build of the <literal>tux_application</literal> image,
   you can start a container based on your new image:
  </para>

  <screen>&prompt.user;docker run -it --name application_instance tux_application:latest</screen>

  <para>
   You have created a container that runs a single instance of your
   application. Bear in mind that after closing the application, the &docker;
   container exits as well.
  </para>
 </sect1>

 <sect1 xml:id="Applications_with_Configuration">
  <title>Running Applications with Specific Configuration</title>

  <para>
   You may need to run an application that is delivered in a standard package
   accessible through &slsa; repositories but you may need to use a different
   configuration or use specific environment variables. In case you would like
   to run several instances of the application with non-standard configuration,
   you can create your own image that will pass the custom configuration to the
   application.
  </para>

  <para>
   An example with the <emphasis>example</emphasis> application follows:
  </para>

<screen>FROM registry.suse.com/suse/sles12sp3
RUN zypper ref &amp;&amp; zypper --non-interactive in example

ENV BACKUP=/backup

RUN mkdir -p $BACKUP
COPY configuration_example /etc/example/

ENTRYPOINT ["/etc/bin/example"]</screen>

  <para>
   The above example <filename>Dockerfile</filename> results in the following
   operations:
  </para>

  <orderedlist>
   <listitem>
    <para>
     Refreshing of repositories and installation of the
     <emphasis>example</emphasis>.
    </para>
   </listitem>
   <listitem>
    <para>
     Sets a <literal>BACKUP</literal> environment variable (the variable
     persists to containers started from the image). You can always overwrite
     the value of the variable with a new one while running the container by
     specifying a new value.
    </para>
   </listitem>
   <listitem>
    <para>
     Creates the directory <literal>/backup</literal>.
    </para>
   </listitem>
   <listitem>
    <para>
     Copies the <filename>configuration_example</filename> to the image.
    </para>
   </listitem>
   <listitem>
    <para>
     Runs the <emphasis>example</emphasis> application.
    </para>
   </listitem>
  </orderedlist>

  <para>
   Now you can build the image and after a successful build, you can run a
   container based on your image.
  </para>
 </sect1>
 <sect1 xml:id="Running_Application_with_Volumes">
  <title>Sharing Data between an Application and the Host System</title>

  <para>
   You may run an application that needs to share data between the
   application's container and the host file system. &deng; enables you to do
   data sharing by using volumes. You can declare a mount point directly in the
   <filename>Dockerfile</filename>. But you cannot specify a directory on the
   host system in the <filename>Dockerfile</filename> as the directory may not
   be accessible at the build time. You can find the mounted directory in the
   <literal>/var/lib/docker/volumes/</literal> directory on the host system.
  </para>

  <note>
   <title>Discarding Changes to the Directory to Be Shared</title>
   <para>
    After you declare a mount point by using the <literal>VOLUME</literal>
    instruction, all your changes performed (by using the
    <literal>RUN</literal> instruction) to the directory will be discarded.
    After the declaration, the volume is part of a temporary container that is
    then removed after a successful build. In case you need to e.g. change
    permissions, perform the change before you declare the directory as a mount
    point in the <filename>Dockerfile</filename>.
   </para>
  </note>

  <para>
   You can specify a particular mount point on the host system when running a
   container by using the <literal>-v</literal> option:
  </para>

  <screen>&prompt.user;docker run -it --name testing -v /home/tux/data:/data sles12sp3:latest /bin/bash</screen>

  <note>
   <para>
    Using the <literal>-v</literal> option overwrites the
    <literal>VOLUME</literal> instruction if you specify the same mount point
    in the container.
   </para>
  </note>

  <para>
   Now let us create an example image with a Web server that will read Web
   content from the host's file system. The <filename>Dockerfile</filename>
   could look as follows:
  </para>

<screen>FROM registry.suse.com/suse/sles12sp3
RUN zypper ref &amp;&amp; zypper --non-interactive in apache2

COPY apache2 /etc/sysconfig/

RUN chown -R admin /data

EXPOSE 80

VOLUME /data

ENTRYPOINT ["apache2ctl"]</screen>

  <para>
   The example above installs the Apache Web server to the image and copies all
   your configuration to the image. The <literal>data</literal> directory will
   be owned by the <emphasis>admin</emphasis> user and will be used as a mount
   point to store your web pages.
  </para>
 </sect1>
 <sect1 xml:id="docker_daemons">
  <title>Applications Running in the Background</title>

  <para>
   Your application may need to run in the background as a daemon or as an
   application exposing ports for communication. In that case a typical &docker;
   container may be run in background. Do not run your application in the
   container in the background as it may cause exiting of the container. Run
   the container in the background instead. An example
   <filename>Dockerfile</filename> for an application exposing a port looks as
   follows:
  </para>

  <example xml:id="ex.docker.dockerfile.apache2">
   <title>Building an Apache2 Web Server &docker; Container (<filename>Dockerfile</filename>)</title>
   <screen>FROM registry.suse.com/suse/sle15 <co xml:id="co.dockerfile.apache2.from"/>
MAINTAINER &exampleuser_plain; <co xml:id="co.dockerfile.apache2.maintainer"/>

ADD etc/ /etc/zypp/ <co xml:id="co.dockerfile.apache2.repos_services"/>
RUN zypper refs &amp;&amp; zypper refresh <co xml:id="co.dockerfile.apache2.refresh"/>
RUN zypper --non-interactive in apache2 <co xml:id="co.dockerfile.apache2.install"/>

RUN echo "The Web Server is running" > /srv/www/htdocs/test.html <co xml:id="co.dockerfile.apache2.echo"/>
# COPY data/* /srv/www/htdocs/ <co xml:id="co.dockerfile.apache2.copy"/>

EXPOSE 80 <co xml:id="co.dockerfile.apache2.expose"/>

ENTRYPOINT ["/usr/sbin/httpd"]
CMD ["-D", "FOREGROUND"]</screen>
   <calloutlist>
    <callout arearefs="co.dockerfile.apache2.from">
     <para>Base image, taken from <xref linkend="Building_Pre-build_Images"/>.</para>
    </callout>
    <callout arearefs="co.dockerfile.apache2.maintainer">
     <para>Optional maintainer of the image.</para>
    </callout>
    <callout arearefs="co.dockerfile.apache2.repos_services">
     <para>The repositories and service files. These are copied to <filename>/etc/zypp/repos.d</filename>
      and <filename>/etc/zypp/services.d</filename> to make these files on the
      host available in the &docker; container too.</para>
    </callout>
    <callout arearefs="co.dockerfile.apache2.refresh">
     <para>The repositories and services are refreshed by this commands</para>
    </callout>
    <callout arearefs="co.dockerfile.apache2.install">
     <para>The installation of Apache2.</para>
    </callout>
    <callout arearefs="co.dockerfile.apache2.echo">
     <para>The test line for debugging purposes; can be removed if everything
      works as expected.</para>
    </callout>
    <callout arearefs="co.dockerfile.apache2.copy">
     <para>The copy instruction to copy your own data to the
      server's directory. Currently, this line is disabled due to
      the hash mark in the first column.
     </para>
    </callout>
    <callout arearefs="co.dockerfile.apache2.expose">
     <para>The exposed port for the Apache Web server.</para>
    </callout>
   </calloutlist>
  </example>

  <note>
   <title>Check for Running Apache2 Instances on Your Host</title>
   <para>Make sure that you do not have any Apache2 server instances
    running on your host. The &docker; container will not serve any data if you
    have a host Apache2 server running. Remove or stop any Apache2 servers on
    your host. </para>
  </note>

  <para>To use the container, proceed as follows:</para>
  <procedure xml:id="pro.docker.apache2">
   <title>Testing the Apache2 Web Server</title>
   <step>
    <para>Prepare your system for the build process:</para>
    <substeps>
     <step>
      <para>Make sure your host is subscribed to the <guimenu>Server Applications Module</guimenu>.
       Open &yast; and select <guimenu>Add System Extensions or Modules</guimenu>
       to see the available modules and extensions.</para>
     </step>
     <step>
      <para>Make sure you have installed the &sle; images from &suse; Registry
       as described in <xref linkend="Building_Pre-build_Images"/>.</para>
     </step>
     <step>
      <para>Save the <filename>Dockerfile</filename> from <xref
       linkend="ex.docker.dockerfile.apache2"/> into the
       <filename class="directory">docker</filename> directory.</para>
     </step>
     <step>
      <para>Copy the registered repositories and service files to the
      <filename class="directory">docker/etc</filename> directory:</para>
      <screen>cd docker
mkdir etc
sudo cp -a /etc/zypp/{repos.d,services.d} etc/</screen>
      <para>
       This ensures that the &docker; container can access the repositories
       and services registered with the host.
       Instead of copying all repository and service files, you can copy
       only the ones that are required by the &docker; container.
      </para>
     </step>
     <step>
      <para>Put your HTML files into the <filename>docker/data</filename>
       directory. The contents of this directory is copied into the &docker;
       image, and thus is published by the Web server.
      </para>
     </step>
    </substeps>
   </step>
   <step xml:id="st.docker.apache2.build">
    <para>Build the container. Set a tag for your image with the <option>-t</option>
     option (here <literal>&exampleuser_plain;/apache2</literal>, but
     you can use any name you want):</para>
    <screen>sudo docker build -t &exampleuser_plain;/apache2 .</screen>
    <para>&deng; refreshes repositories and installs the Apache2
     server as it is not installed by default in the &slsa; &docker; image.</para>
   </step>
   <step>
    <para>Run the image in detached mode:</para>
    <screen>docker run --detach --interactive --tty &exampleuser_plain;/apache2</screen>
    <para>&deng; returns the container ID, for example:</para>
    <screen>7bd674eb196d330d50f8a3cfc2bc61a243a4a535390767250b11a7886134ab93</screen>
   </step>
   <step>
    <para>
     Point your browser to <uri>http://localhost:80/test.html</uri>.
     You should see the message <literal>The Web Server is running</literal>.
    </para>
   </step>
  </procedure>
  <para>
   The above procedure describes how to build an image containing the Apache2
   Web server. You can use the resulting container to serve your data with
   the Apache2 Web server by following these steps:
  </para>
  <procedure>
   <title>Creating a &docker; Container with your Own Data</title>
   <step>
    <para>Stop and remove the previous container using the following command:</para>
    <screen>docker ps --latest
CONTAINER ID        IMAGE               COMMAND                  [...]
<emphasis role="bold">afee0124a0c7</emphasis>        tux/apache2         "/usr/sbin/httpd -..."   [...]
docker rm --force afee0124a0c7</screen>
   </step>
   <step>
    <para>Remove or disable the echo line <xref linkend="co.dockerfile.apache2.echo"/>
     in <xref linkend="ex.docker.dockerfile.apache2"/> and remove the
     hash character in the first column of the copy line
     <xref linkend="co.dockerfile.apache2.copy"/>.
    </para>
   </step>
   <step>
    <para>Rebuild the image as described in <xref linkend="st.docker.apache2.build"/>
     of <xref linkend="pro.docker.apache2" xrefstyle="select:label"/>.</para>
   </step>
   <step>
    <para>Run the image in detached mode:</para>
    <screen>docker run --detach --interactive --tty &exampleuser_plain;/apache2</screen>
    <para>&deng; responds with the container ID, for example:</para>
    <screen>e43fff4ae9832ecdb7677c058a73039d7610c32145a1d9b6ad0a4ed52b5c4dc7</screen>
   </step>
  </procedure>
  <para>View the published data at <uri>http://localhost:80</uri>.
   If you do not want to copy your data into the &docker; container,
   share a specific directory on your host. Refer to
   <link xlink:href="https://docs.docker.com/storage/volumes/"/>
   for more information.
  </para>
 </sect1>
</chapter>
